{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SaWa\\\\Desktop\\\\New folder\\\\myreads\\\\myreads\\\\starter\\\\src\\\\Components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport * as BooksAPI from '../BooksAPI';\nimport { Link } from 'react-router-dom';\nimport { Component } from 'react/cjs/react.production.min';\nimport Book from './Book'; // class Search extends Component{\n//   state={\n//     query:'',\n//     searchedBooks:[]\n//   }\n//   updateQuery=(query)=>{\n//     let spaceQuery=query.replace(/^\\s+/,'')\n//     this.setState({query:spaceQuery})\n//     this.fetchSearchedBooks(query)\n//   }\n//   fetchSearchedBooks=(query)=>{\n//     if (query.length!==0){\n//       BooksAPI.search(query).then((searchedBooks)=>{\n//         if(searchedBooks.error){\n//           this.setState({searchedBooks:[]})\n//         }else{this.setState({searchedBooks:searchedBooks})}\n//       })\n//     }else{this.setState({searchedBooks:[]})}\n//   }\n//   render(){\n//     return(\n//       <div className='search-books'>\n//         <div className='search-books-bar'>\n//         <Link className=\"close-search\" to=\"/\">\n//             Close\n//           </Link>\n//           <div className='search-books-input-wrapper'>\n//             <input type= 'text' placeholder=\"Search by title or author\" value={this.state.query} onChange={(o)=>this.updateQuery(o.target.value)}></input>\n//           </div>\n//         </div>\n//         <div className='search-books-results'>\n//           <ol className='books-grid'>\n//             {this.state.searchedBooks.map(searchedBook=>{\n//               let shelf =\"none\"\n//               this.props.books.forEach(book=>{\n//                 if(book.id !==searchedBook.id){\n//                   searchedBook.shelf=\"none\"\n//                 }else{shelf=book.shelf}\n//               })\n//               return(\n//                 <li key={searchedBook.id}>\n//                   <Book book={searchedBook} shelfChange={this.props.shelfChange} currentShelf={shelf}></Book>\n//                 </li>\n//               )\n//             })}\n//           </ol>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// export default Search;\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search(props) {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [searchedBooks, setSearchedBooks] = useState([]);\n\n  const updateQuery = query => {\n    let spaceQuery = query.replace(/^\\s+/, '');\n    setQuery({\n      query: spaceQuery\n    });\n    fetchSearchedBooks(query);\n  };\n\n  const fetchSearchedBooks = query => {\n    if (query.length !== 0) {\n      BooksAPI.search(query).then(searchedBooks => {\n        if (searchedBooks.error) {\n          setSearchedBooks({\n            searchedBooks: []\n          });\n        } else {\n          setSearchedBooks({\n            searchedBooks: searchedBooks\n          });\n        }\n      });\n    } else {\n      setSearchedBooks({\n        searchedBooks: []\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title or author\",\n          value: query,\n          onChange: o => updateQuery(o.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\",\n        children: searchedBooks.map(searchedBook => {\n          let shelf = \"none\";\n          props.books.forEach(book => {\n            if (book.id !== searchedBook.id) {\n              searchedBook.shelf = \"none\";\n            } else {\n              shelf = book.shelf;\n            }\n          });\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Book, {\n              book: searchedBook,\n              shelfChange: props.shelfChange,\n              currentShelf: shelf\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)\n          }, searchedBook.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Search, \"wjPlhlAe47lkT+vAtXkocdN+jho=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/SaWa/Desktop/New folder/myreads/myreads/starter/src/Components/Search.js"],"names":["BooksAPI","Link","Component","Book","useState","Search","props","query","setQuery","searchedBooks","setSearchedBooks","updateQuery","spaceQuery","replace","fetchSearchedBooks","length","search","then","error","o","target","value","map","searchedBook","shelf","books","forEach","book","id","shelfChange"],"mappings":"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","sourcesContent":["import * as BooksAPI from '../BooksAPI'\r\nimport {Link} from 'react-router-dom'\r\nimport { Component } from 'react/cjs/react.production.min';\r\nimport Book from './Book';\r\n\r\n\r\n// class Search extends Component{\r\n\r\n//   state={\r\n//     query:'',\r\n//     searchedBooks:[]\r\n//   }\r\n//   updateQuery=(query)=>{\r\n//     let spaceQuery=query.replace(/^\\s+/,'')\r\n//     this.setState({query:spaceQuery})\r\n//     this.fetchSearchedBooks(query)\r\n//   }\r\n//   fetchSearchedBooks=(query)=>{\r\n//     if (query.length!==0){\r\n//       BooksAPI.search(query).then((searchedBooks)=>{\r\n//         if(searchedBooks.error){\r\n//           this.setState({searchedBooks:[]})\r\n//         }else{this.setState({searchedBooks:searchedBooks})}\r\n//       })\r\n//     }else{this.setState({searchedBooks:[]})}\r\n//   }\r\n//   render(){\r\n   \r\n\r\n//     return(\r\n\r\n//       <div className='search-books'>\r\n//         <div className='search-books-bar'>\r\n//         <Link className=\"close-search\" to=\"/\">\r\n//             Close\r\n//           </Link>\r\n//           <div className='search-books-input-wrapper'>\r\n//             <input type= 'text' placeholder=\"Search by title or author\" value={this.state.query} onChange={(o)=>this.updateQuery(o.target.value)}></input>\r\n//           </div>\r\n\r\n//         </div>\r\n//         <div className='search-books-results'>\r\n//           <ol className='books-grid'>\r\n//             {this.state.searchedBooks.map(searchedBook=>{\r\n//               let shelf =\"none\"\r\n//               this.props.books.forEach(book=>{\r\n//                 if(book.id !==searchedBook.id){\r\n//                   searchedBook.shelf=\"none\"\r\n//                 }else{shelf=book.shelf}\r\n//               })\r\n//               return(\r\n//                 <li key={searchedBook.id}>\r\n//                   <Book book={searchedBook} shelfChange={this.props.shelfChange} currentShelf={shelf}></Book>\r\n//                 </li>\r\n//               )\r\n//             })}\r\n//           </ol>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default Search;\r\n\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction Search(props){\r\n\r\n  const [query,setQuery]=useState(\"\");\r\n  const [searchedBooks,setSearchedBooks]=useState([]);\r\n  \r\n  const updateQuery=(query)=>{\r\n    let spaceQuery=query.replace(/^\\s+/,'')\r\n    setQuery({query:spaceQuery})\r\n    fetchSearchedBooks(query)\r\n  }\r\n  const fetchSearchedBooks=(query)=>{\r\n    if (query.length!==0){\r\n      BooksAPI.search(query).then((searchedBooks)=>{\r\n        if(searchedBooks.error){\r\n          setSearchedBooks({searchedBooks:[]})\r\n        }else{setSearchedBooks({searchedBooks:searchedBooks})}\r\n      })\r\n    }else{setSearchedBooks({searchedBooks:[]})}\r\n  }\r\n  \r\n   \r\n\r\n    return(\r\n\r\n      <div className='search-books'>\r\n        <div className='search-books-bar'>\r\n        <Link className=\"close-search\" to=\"/\">\r\n            Close\r\n          </Link>\r\n          <div className='search-books-input-wrapper'>\r\n            <input type= 'text' placeholder=\"Search by title or author\" value={query} onChange={(o)=>updateQuery(o.target.value)}></input>\r\n          </div>\r\n\r\n        </div>\r\n        <div className='search-books-results'>\r\n          <ol className='books-grid'>\r\n            {searchedBooks.map(searchedBook=>{\r\n              let shelf =\"none\"\r\n              props.books.forEach(book=>{\r\n                if(book.id !==searchedBook.id){\r\n                  searchedBook.shelf=\"none\"\r\n                }else{shelf=book.shelf}\r\n              })\r\n              return(\r\n                <li key={searchedBook.id}>\r\n                  <Book book={searchedBook} shelfChange={props.shelfChange} currentShelf={shelf}></Book>\r\n                </li>\r\n              )\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}