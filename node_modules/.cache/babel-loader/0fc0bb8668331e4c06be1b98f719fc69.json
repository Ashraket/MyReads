{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SaWa\\\\Desktop\\\\New folder\\\\myreads\\\\myreads\\\\starter\\\\src\\\\Components\\\\Search.js\";\nimport * as BooksAPI from '../BooksAPI';\nimport { Link } from 'react-router-dom';\nimport { Component } from 'react/cjs/react.production.min';\nimport Book from './Book';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: '',\n      searchedBooks: []\n    };\n\n    this.updateQuery = query => {\n      let spaceQuery = query.replace(/^\\s+/, '');\n      this.setState({\n        query: spaceQuery\n      });\n      this.fetchSearchedBooks(query);\n    };\n\n    this.fetchSearchedBooks = query => {\n      if (query.length !== 0) {\n        BooksAPI.search(query).then(searchedBooks => {\n          if (searchedBooks.error) {\n            this.setState({\n              searchedBooks: []\n            });\n          } else {\n            this.setState({\n              searchedBooks: searchedBooks\n            });\n          }\n        });\n      } else {\n        this.setState({\n          searchedBooks: []\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-bar\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"close-search\",\n          to: \"/\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-books-input-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search by title or author\",\n            value: this.state.query,\n            onChange: o => this.updateQuery(o.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-results\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"books-grid\",\n          children: this.state.searchedBooks.map(searchedBook => {\n            let shelf = \"none\";\n            this.props.books.forEach(book => {\n              if (book.id !== searchedBook.id) {\n                searchedBook.shelf = \"none\";\n              } else {\n                shelf = book.shelf;\n              }\n            });\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Book, {\n                book: searchedBook,\n                shelfChange: this.props.shelfChange,\n                currentShelf: shelf\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this)\n            }, searchedBook.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search; //functiona\n// import { useState } from 'react';\n// function Search(props){\n//   const [query,setQuery]=useState(\"\");\n//   const [searchedBooks,setSearchedBooks]=useState([]);\n//   const updateQuery=(query)=>{\n//     let spaceQuery=query.replace(/^\\s+/,'')\n//     setQuery({query:spaceQuery})\n//     fetchSearchedBooks(query)\n//   }\n//   const fetchSearchedBooks=(query)=>{\n//     if (query.length!==0){\n//       BooksAPI.search(query).then((searchedBooks)=>{\n//         if(searchedBooks.error){\n//           setSearchedBooks({searchedBooks:[]})\n//         }else{setSearchedBooks({searchedBooks:searchedBooks})}\n//       })\n//     }else{setSearchedBooks({searchedBooks:[]})}\n//   }\n//     return(\n//       <div className='search-books'>\n//         <div className='search-books-bar'>\n//         <Link className=\"close-search\" to=\"/\">\n//             Close\n//           </Link>\n//           <div className='search-books-input-wrapper'>\n//             <input type= 'text' placeholder=\"Search by title or author\" value={query} onChange={(o)=>updateQuery(o.target.value)}></input>\n//           </div>\n//         </div>\n//         <div className='search-books-results'>\n//           <ol className='books-grid'>\n//             {searchedBooks.map(searchedBook=>{\n//               let shelf =\"none\"\n//               props.books.forEach(book=>{\n//                 if(book.id !==searchedBook.id){\n//                   searchedBook.shelf=\"none\"\n//                 }else{shelf=book.shelf}\n//               })\n//               return(\n//                 <li key={searchedBook.id}>\n//                   <Book book={searchedBook} shelfChange={props.shelfChange} currentShelf={shelf}></Book>\n//                 </li>\n//               )\n//             })}\n//           </ol>\n//         </div>\n//       </div>\n//     )\n// }\n// export default Search;","map":{"version":3,"sources":["C:/Users/SaWa/Desktop/New folder/myreads/myreads/starter/src/Components/Search.js"],"names":["BooksAPI","Link","Component","Book","Search","state","query","searchedBooks","updateQuery","spaceQuery","replace","setState","fetchSearchedBooks","length","search","then","error","render","o","target","value","map","searchedBook","shelf","props","books","forEach","book","id","shelfChange"],"mappings":"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","sourcesContent":["import * as BooksAPI from '../BooksAPI'\r\nimport {Link} from 'react-router-dom'\r\nimport { Component } from 'react/cjs/react.production.min';\r\nimport Book from './Book';\r\n\r\n\r\nclass Search extends Component{\r\n\r\n  state={\r\n    query:'',\r\n    searchedBooks:[]\r\n  }\r\n  updateQuery=(query)=>{\r\n    let spaceQuery=query.replace(/^\\s+/,'')\r\n    this.setState({query:spaceQuery})\r\n    this.fetchSearchedBooks(query)\r\n  }\r\n  fetchSearchedBooks=(query)=>{\r\n    if (query.length!==0){\r\n      BooksAPI.search(query).then((searchedBooks)=>{\r\n        if(searchedBooks.error){\r\n          this.setState({searchedBooks:[]})\r\n        }else{this.setState({searchedBooks:searchedBooks})}\r\n      })\r\n    }else{this.setState({searchedBooks:[]})}\r\n  }\r\n  render(){\r\n   \r\n\r\n    return(\r\n\r\n      <div className='search-books'>\r\n        <div className='search-books-bar'>\r\n        <Link className=\"close-search\" to=\"/\">\r\n            Close\r\n          </Link>\r\n          <div className='search-books-input-wrapper'>\r\n            <input type= 'text' placeholder=\"Search by title or author\" value={this.state.query} onChange={(o)=>this.updateQuery(o.target.value)}></input>\r\n          </div>\r\n\r\n        </div>\r\n        <div className='search-books-results'>\r\n          <ol className='books-grid'>\r\n            {this.state.searchedBooks.map(searchedBook=>{\r\n              let shelf =\"none\"\r\n              this.props.books.forEach(book=>{\r\n                if(book.id !==searchedBook.id){\r\n                  searchedBook.shelf=\"none\"\r\n                }else{shelf=book.shelf}\r\n              })\r\n              return(\r\n                <li key={searchedBook.id}>\r\n                  <Book book={searchedBook} shelfChange={this.props.shelfChange} currentShelf={shelf}></Book>\r\n                </li>\r\n              )\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;\r\n\r\n\r\n//functiona\r\n\r\n// import { useState } from 'react';\r\n\r\n\r\n// function Search(props){\r\n\r\n//   const [query,setQuery]=useState(\"\");\r\n//   const [searchedBooks,setSearchedBooks]=useState([]);\r\n  \r\n//   const updateQuery=(query)=>{\r\n//     let spaceQuery=query.replace(/^\\s+/,'')\r\n//     setQuery({query:spaceQuery})\r\n//     fetchSearchedBooks(query)\r\n//   }\r\n//   const fetchSearchedBooks=(query)=>{\r\n//     if (query.length!==0){\r\n//       BooksAPI.search(query).then((searchedBooks)=>{\r\n//         if(searchedBooks.error){\r\n//           setSearchedBooks({searchedBooks:[]})\r\n//         }else{setSearchedBooks({searchedBooks:searchedBooks})}\r\n//       })\r\n//     }else{setSearchedBooks({searchedBooks:[]})}\r\n//   }\r\n  \r\n   \r\n\r\n//     return(\r\n\r\n//       <div className='search-books'>\r\n//         <div className='search-books-bar'>\r\n//         <Link className=\"close-search\" to=\"/\">\r\n//             Close\r\n//           </Link>\r\n//           <div className='search-books-input-wrapper'>\r\n//             <input type= 'text' placeholder=\"Search by title or author\" value={query} onChange={(o)=>updateQuery(o.target.value)}></input>\r\n//           </div>\r\n\r\n//         </div>\r\n//         <div className='search-books-results'>\r\n//           <ol className='books-grid'>\r\n//             {searchedBooks.map(searchedBook=>{\r\n//               let shelf =\"none\"\r\n//               props.books.forEach(book=>{\r\n//                 if(book.id !==searchedBook.id){\r\n//                   searchedBook.shelf=\"none\"\r\n//                 }else{shelf=book.shelf}\r\n//               })\r\n//               return(\r\n//                 <li key={searchedBook.id}>\r\n//                   <Book book={searchedBook} shelfChange={props.shelfChange} currentShelf={shelf}></Book>\r\n//                 </li>\r\n//               )\r\n//             })}\r\n//           </ol>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n  \r\n// }\r\n\r\n// export default Search;"]},"metadata":{},"sourceType":"module"}